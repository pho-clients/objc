#import <Foundation/Foundation.h>
#import "PhoEdge.h"
#import "PhoInlineResponse200.h"
#import "PhoInlineResponse2001.h"
#import "PhoInlineResponse2002.h"
#import "PhoInlineResponse2003.h"
#import "PhoInlineResponse2004.h"
#import "PhoNode.h"
#import "PhoNodeEdge.h"
#import "PhoApi.h"

/**
* Social Graph API
* Pho Networks REST API
*
* OpenAPI spec version: 1.1.1
* Contact: emre@phonetworks.org
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface PhoDefaultApi: NSObject <PhoApi>

extern NSString* kPhoDefaultApiErrorDomain;
extern NSInteger kPhoDefaultApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// updates (or creates) an attribute
/// Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn't yet exist. 
///
/// @param value The value to update the key with. (optional)
/// 
///  code:200 message:"Attribute updated"
///
/// @return PhoInlineResponse2004*
-(NSNumber*) addAttributeWithValue: (NSString*) value
    completionHandler: (void (^)(PhoInlineResponse2004* output, NSError* error)) handler;


/// deletes an attribute
/// Works with all entities, including nodes and edges. Given its key, deletes an  attribute. 
///
/// 
///  code:200 message:"Attribute deleted.",
///  code:500 message:"Failure. If the attribute does not exist."
///
/// @return PhoInlineResponse2004*
-(NSNumber*) delAttributeWithCompletionHandler: 
    (void (^)(PhoInlineResponse2004* output, NSError* error)) handler;


/// deletes an entity
/// Works with all entities, including nodes and edges.  
///
/// 
///  code:200 message:"Success.",
///  code:500 message:"Failure. The entity (node/edge) does not exist or there was a  problem deleting. "
///
/// @return 
-(NSNumber*) delEntityWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// retrieves the edges of a node
/// By passing in a node ID, you can fetch all the edges of the node in question; including incoming and outgoing. 
///
/// @param uuid The node ID
/// 
///  code:200 message:"search results matching criteria",
///  code:500 message:"Failure."
///
/// @return PhoInlineResponse2003*
-(NSNumber*) getAllEdgesWithUuid: (NSString*) uuid
    completionHandler: (void (^)(PhoInlineResponse2003* output, NSError* error)) handler;


/// retrieves the value of an entity attribute
/// Attribute key must be case-sensitive. 
///
/// @param uuid The node ID
/// @param key The attribute key
/// 
///  code:200 message:"The attribute's value or nil if the attribute does not exist."
///
/// @return NSString*
-(NSNumber*) getAttributeWithUuid: (NSString*) uuid
    key: (NSString*) key
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// retrieves the existing attribute keys of an entity (edge or node)
/// Attribute keys are case-sensitive, and they will be listed in an array. 
///
/// @param uuid The node ID
/// 
///  code:200 message:"Attribute keys",
///  code:400 message:"bad input parameter"
///
/// @return NSArray<NSString*>*
-(NSNumber*) getAttributesWithUuid: (NSString*) uuid
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// retrieves an edge
/// By passing in an ID, you can search for available edges in the system.  
///
/// @param uuid The edge ID
/// 
///  code:200 message:"Edge with given ID",
///  code:500 message:"Failure. Either the edge does not exist or it's not an edge."
///
/// @return PhoEdge*
-(NSNumber*) getEdgeWithUuid: (NSString*) uuid
    completionHandler: (void (^)(PhoEdge* output, NSError* error)) handler;


/// retrieves the edge getter methods of a node
/// By passing in a node UUID that exists in the database, you can fetch  the edge getter methods of the node in question. 
///
/// @param uuid The node ID
/// 
///  code:200 message:"search results matching criteria",
///  code:500 message:"Failure.  Either the node does not exist or the entity is not a node."
///
/// @return NSArray<NSString*>*
-(NSNumber*) getEdgeGettersWithUuid: (NSString*) uuid
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// retrieves the edge setter methods of a node
/// By passing in a node UUID that exists in the database, you can fetch  the edge setter methods of the node in question. These setters may or  may not be formative. If they are formative, a new node is created in result. 
///
/// @param uuid The node ID
/// 
///  code:200 message:"search results matching criteria",
///  code:500 message:"Failure. Either the node does not exist or the entity is not a node."
///
/// @return NSArray<NSString*>*
-(NSNumber*) getEdgeSettersWithUuid: (NSString*) uuid
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// retrieves the Graph Founder
/// The Founder must be a \\Pho\\Framework\\Actor object.  This method returns the object type as well as object ID. 
///
/// 
///  code:200 message:"The Founder has been located."
///
/// @return PhoInlineResponse200*
-(NSNumber*) getFounderWithCompletionHandler: 
    (void (^)(PhoInlineResponse200* output, NSError* error)) handler;


/// retrieves the main Graph
/// The Graph must be a \\Pho\\Lib\\Graph\\SubGraph and \\Pho\\Framework\\Graph object.  This method returns the object type as well as object ID. The Graph contains all nodes and edges in the system.  Though it is contained by Space, its one and only container. 
///
/// 
///  code:200 message:"The Graph has been located."
///
/// @return PhoInlineResponse2001*
-(NSNumber*) getGraphWithCompletionHandler: 
    (void (^)(PhoInlineResponse2001* output, NSError* error)) handler;


/// retrieves the incoming edges of a node
/// By passing in a node ID, you can fetch  the incoming edges of the node in question. 
///
/// @param uuid the node ID
/// 
///  code:200 message:"The incoming edges.",
///  code:500 message:"Failure."
///
/// @return NSArray<PhoNodeEdge>*
-(NSNumber*) getIncomingEdgesWithUuid: (NSString*) uuid
    completionHandler: (void (^)(NSArray<PhoNodeEdge>* output, NSError* error)) handler;


/// retrieves a node
/// By passing in an ID, you can search for available nodes in the system. Please note, this function will not return edges. This method  is  reserved for nodes only.  
///
/// @param uuid The node ID
/// 
///  code:200 message:"Node with given ID",
///  code:500 message:"Failure. Either the node does not exist or it's not a node."
///
/// @return PhoNode*
-(NSNumber*) getNodeWithUuid: (NSString*) uuid
    completionHandler: (void (^)(PhoNode* output, NSError* error)) handler;


/// edge getter
/// Fetches edge results, whether as edge IDs or node IDs, depending on edge's characteristics.  
///
/// @param uuid The node ID
/// @param edge The edge getter label
/// 
///  code:200 message:"Result ID(s)",
///  code:500 message:"Failure."
///
/// @return NSArray<NSString*>*
-(NSNumber*) getNodeEdgeWithUuid: (NSString*) uuid
    edge: (NSString*) edge
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// retrieves the outgoing edges of a node
/// By passing in a node ID, you can fetch  the outgoing edges of the node in question. 
///
/// @param uuid the node ID
/// 
///  code:200 message:"The outgoing edges.",
///  code:500 message:"Failure."
///
/// @return NSArray<PhoNodeEdge>*
-(NSNumber*) getOutgoingEdgesWithUuid: (NSString*) uuid
    completionHandler: (void (^)(NSArray<PhoNodeEdge>* output, NSError* error)) handler;


/// retrieves the Space
/// The Space must be a \\Pho\\Lib\\Graph\\Graph object.  This method returns the object type as well as object uuid. Space always comes with the nil ID;  00000000000000000000000000000000, and under normal circumstances its class is always Pho\\Kernel\\Standards\\Space 
///
/// 
///  code:200 message:"The space has been located."
///
/// @return PhoInlineResponse2002*
-(NSNumber*) getSpaceWithCompletionHandler: 
    (void (^)(PhoInlineResponse2002* output, NSError* error)) handler;


/// fetches entity type
/// Possible values are; \"Space\", \"Node\", \"Graph Node\", \"Graph\", \"Actor Node\" \"Object Node\", \"Edge\", \"Read Edge\", \"Write Edge\", \"Subscribe Edge\", \"Mention Edge\", \"Unidentified\". 
///
/// @param uuid the node
/// 
///  code:200 message:"Entity Type"
///
/// @return NSString*
-(NSNumber*) getTypeWithUuid: (NSString*) uuid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// creates an Actor object
/// Fetches whatever set as \"default_object\"=>\"actor\" while determining what Actor object to construct. If it doesn't exist, uses \"default_object\"=>\"founder\" class. Otherwise fails. 
///
/// @param param1 Actor constructor argument. More parameters may be passed via param2, param3 ... param50.  (optional)
/// 
///  code:200 message:"Returns the ID of the created Actor object.",
///  code:500 message:"Failure."
///
/// @return NSString*
-(NSNumber*) makeActorWithParam1: (NSString*) param1
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// creates an edge
/// Used to set new edges. If the edge is formative, then a node is also formed. 
///
/// @param param1 The value to update the key with. There can be 50 of those. For example;  param1&#x3D;\&quot;value1\&quot;, param2 &#x3D;\&quot;another value\&quot; depending on the edge&#39;s default constructor variable count.  (optional)
/// 
///  code:200 message:"Result ID",
///  code:500 message:"Failure."
///
/// @return NSString*
-(NSNumber*) makeEdgeWithParam1: (NSString*) param1
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// updates (or creates) an attribute
/// Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn't yet exist. 
///
/// @param value The value to update the key with. (optional)
/// 
///  code:200 message:"Attribute updated"
///
/// @return PhoInlineResponse2004*
-(NSNumber*) setAttributeWithValue: (NSString*) value
    completionHandler: (void (^)(PhoInlineResponse2004* output, NSError* error)) handler;



@end
